<?php
/**
 * Project
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * EUfunds GO
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Project Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Project implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Project';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'description' => 'string',
        'images' => 'string[]',
        'access_description' => 'string',
        'total_worth' => 'int',
        'eu_dotation' => 'int',
        'longitude' => 'float',
        'latitude' => 'float',
        'category' => '\OpenAPI\Client\Model\ProjectCategory',
        'average_rate' => 'float',
        'total_rates' => 'int',
        'is_paid' => 'bool',
        'created_at' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'description' => null,
        'images' => null,
        'access_description' => null,
        'total_worth' => null,
        'eu_dotation' => null,
        'longitude' => null,
        'latitude' => null,
        'category' => null,
        'average_rate' => null,
        'total_rates' => null,
        'is_paid' => null,
        'created_at' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'name' => false,
		'description' => true,
		'images' => false,
		'access_description' => true,
		'total_worth' => false,
		'eu_dotation' => false,
		'longitude' => false,
		'latitude' => false,
		'category' => false,
		'average_rate' => true,
		'total_rates' => false,
		'is_paid' => false,
		'created_at' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'description' => 'description',
        'images' => 'images',
        'access_description' => 'access_description',
        'total_worth' => 'total_worth',
        'eu_dotation' => 'eu_dotation',
        'longitude' => 'longitude',
        'latitude' => 'latitude',
        'category' => 'category',
        'average_rate' => 'average_rate',
        'total_rates' => 'total_rates',
        'is_paid' => 'is_paid',
        'created_at' => 'created_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'description' => 'setDescription',
        'images' => 'setImages',
        'access_description' => 'setAccessDescription',
        'total_worth' => 'setTotalWorth',
        'eu_dotation' => 'setEuDotation',
        'longitude' => 'setLongitude',
        'latitude' => 'setLatitude',
        'category' => 'setCategory',
        'average_rate' => 'setAverageRate',
        'total_rates' => 'setTotalRates',
        'is_paid' => 'setIsPaid',
        'created_at' => 'setCreatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'description' => 'getDescription',
        'images' => 'getImages',
        'access_description' => 'getAccessDescription',
        'total_worth' => 'getTotalWorth',
        'eu_dotation' => 'getEuDotation',
        'longitude' => 'getLongitude',
        'latitude' => 'getLatitude',
        'category' => 'getCategory',
        'average_rate' => 'getAverageRate',
        'total_rates' => 'getTotalRates',
        'is_paid' => 'getIsPaid',
        'created_at' => 'getCreatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('images', $data ?? [], null);
        $this->setIfExists('access_description', $data ?? [], null);
        $this->setIfExists('total_worth', $data ?? [], null);
        $this->setIfExists('eu_dotation', $data ?? [], null);
        $this->setIfExists('longitude', $data ?? [], null);
        $this->setIfExists('latitude', $data ?? [], null);
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('average_rate', $data ?? [], null);
        $this->setIfExists('total_rates', $data ?? [], null);
        $this->setIfExists('is_paid', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if (($this->container['id'] < 0)) {
            $invalidProperties[] = "invalid value for 'id', must be bigger than or equal to 0.";
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 256)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 256.";
        }

        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['images'] === null) {
            $invalidProperties[] = "'images' can't be null";
        }
        if ($this->container['access_description'] === null) {
            $invalidProperties[] = "'access_description' can't be null";
        }
        if ($this->container['total_worth'] === null) {
            $invalidProperties[] = "'total_worth' can't be null";
        }
        if (($this->container['total_worth'] < 0)) {
            $invalidProperties[] = "invalid value for 'total_worth', must be bigger than or equal to 0.";
        }

        if ($this->container['eu_dotation'] === null) {
            $invalidProperties[] = "'eu_dotation' can't be null";
        }
        if (($this->container['eu_dotation'] < 0)) {
            $invalidProperties[] = "invalid value for 'eu_dotation', must be bigger than or equal to 0.";
        }

        if ($this->container['longitude'] === null) {
            $invalidProperties[] = "'longitude' can't be null";
        }
        if (($this->container['longitude'] > 180)) {
            $invalidProperties[] = "invalid value for 'longitude', must be smaller than or equal to 180.";
        }

        if (($this->container['longitude'] < -180)) {
            $invalidProperties[] = "invalid value for 'longitude', must be bigger than or equal to -180.";
        }

        if ($this->container['latitude'] === null) {
            $invalidProperties[] = "'latitude' can't be null";
        }
        if (($this->container['latitude'] > 90)) {
            $invalidProperties[] = "invalid value for 'latitude', must be smaller than or equal to 90.";
        }

        if (($this->container['latitude'] < -90)) {
            $invalidProperties[] = "invalid value for 'latitude', must be bigger than or equal to -90.";
        }

        if ($this->container['category'] === null) {
            $invalidProperties[] = "'category' can't be null";
        }
        if ($this->container['average_rate'] === null) {
            $invalidProperties[] = "'average_rate' can't be null";
        }
        if (($this->container['average_rate'] > 5)) {
            $invalidProperties[] = "invalid value for 'average_rate', must be smaller than or equal to 5.";
        }

        if (($this->container['average_rate'] < 1)) {
            $invalidProperties[] = "invalid value for 'average_rate', must be bigger than or equal to 1.";
        }

        if ($this->container['total_rates'] === null) {
            $invalidProperties[] = "'total_rates' can't be null";
        }
        if (($this->container['total_rates'] < 0)) {
            $invalidProperties[] = "invalid value for 'total_rates', must be bigger than or equal to 0.";
        }

        if ($this->container['is_paid'] === null) {
            $invalidProperties[] = "'is_paid' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        if (($id < 0)) {
            throw new \InvalidArgumentException('invalid value for $id when calling Project., must be bigger than or equal to 0.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 256)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Project., must be smaller than or equal to 256.');
        }
        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Project., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets images
     *
     * @return string[]
     */
    public function getImages()
    {
        return $this->container['images'];
    }

    /**
     * Sets images
     *
     * @param string[] $images images
     *
     * @return self
     */
    public function setImages($images)
    {
        if (is_null($images)) {
            throw new \InvalidArgumentException('non-nullable images cannot be null');
        }
        $this->container['images'] = $images;

        return $this;
    }

    /**
     * Gets access_description
     *
     * @return string
     */
    public function getAccessDescription()
    {
        return $this->container['access_description'];
    }

    /**
     * Sets access_description
     *
     * @param string $access_description access_description
     *
     * @return self
     */
    public function setAccessDescription($access_description)
    {
        if (is_null($access_description)) {
            array_push($this->openAPINullablesSetToNull, 'access_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('access_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['access_description'] = $access_description;

        return $this;
    }

    /**
     * Gets total_worth
     *
     * @return int
     */
    public function getTotalWorth()
    {
        return $this->container['total_worth'];
    }

    /**
     * Sets total_worth
     *
     * @param int $total_worth total_worth
     *
     * @return self
     */
    public function setTotalWorth($total_worth)
    {
        if (is_null($total_worth)) {
            throw new \InvalidArgumentException('non-nullable total_worth cannot be null');
        }

        if (($total_worth < 0)) {
            throw new \InvalidArgumentException('invalid value for $total_worth when calling Project., must be bigger than or equal to 0.');
        }

        $this->container['total_worth'] = $total_worth;

        return $this;
    }

    /**
     * Gets eu_dotation
     *
     * @return int
     */
    public function getEuDotation()
    {
        return $this->container['eu_dotation'];
    }

    /**
     * Sets eu_dotation
     *
     * @param int $eu_dotation eu_dotation
     *
     * @return self
     */
    public function setEuDotation($eu_dotation)
    {
        if (is_null($eu_dotation)) {
            throw new \InvalidArgumentException('non-nullable eu_dotation cannot be null');
        }

        if (($eu_dotation < 0)) {
            throw new \InvalidArgumentException('invalid value for $eu_dotation when calling Project., must be bigger than or equal to 0.');
        }

        $this->container['eu_dotation'] = $eu_dotation;

        return $this;
    }

    /**
     * Gets longitude
     *
     * @return float
     */
    public function getLongitude()
    {
        return $this->container['longitude'];
    }

    /**
     * Sets longitude
     *
     * @param float $longitude longitude
     *
     * @return self
     */
    public function setLongitude($longitude)
    {
        if (is_null($longitude)) {
            throw new \InvalidArgumentException('non-nullable longitude cannot be null');
        }

        if (($longitude > 180)) {
            throw new \InvalidArgumentException('invalid value for $longitude when calling Project., must be smaller than or equal to 180.');
        }
        if (($longitude < -180)) {
            throw new \InvalidArgumentException('invalid value for $longitude when calling Project., must be bigger than or equal to -180.');
        }

        $this->container['longitude'] = $longitude;

        return $this;
    }

    /**
     * Gets latitude
     *
     * @return float
     */
    public function getLatitude()
    {
        return $this->container['latitude'];
    }

    /**
     * Sets latitude
     *
     * @param float $latitude latitude
     *
     * @return self
     */
    public function setLatitude($latitude)
    {
        if (is_null($latitude)) {
            throw new \InvalidArgumentException('non-nullable latitude cannot be null');
        }

        if (($latitude > 90)) {
            throw new \InvalidArgumentException('invalid value for $latitude when calling Project., must be smaller than or equal to 90.');
        }
        if (($latitude < -90)) {
            throw new \InvalidArgumentException('invalid value for $latitude when calling Project., must be bigger than or equal to -90.');
        }

        $this->container['latitude'] = $latitude;

        return $this;
    }

    /**
     * Gets category
     *
     * @return \OpenAPI\Client\Model\ProjectCategory
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param \OpenAPI\Client\Model\ProjectCategory $category category
     *
     * @return self
     */
    public function setCategory($category)
    {
        if (is_null($category)) {
            throw new \InvalidArgumentException('non-nullable category cannot be null');
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets average_rate
     *
     * @return float
     */
    public function getAverageRate()
    {
        return $this->container['average_rate'];
    }

    /**
     * Sets average_rate
     *
     * @param float $average_rate average_rate
     *
     * @return self
     */
    public function setAverageRate($average_rate)
    {
        if (is_null($average_rate)) {
            array_push($this->openAPINullablesSetToNull, 'average_rate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('average_rate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($average_rate) && ($average_rate > 5)) {
            throw new \InvalidArgumentException('invalid value for $average_rate when calling Project., must be smaller than or equal to 5.');
        }
        if (!is_null($average_rate) && ($average_rate < 1)) {
            throw new \InvalidArgumentException('invalid value for $average_rate when calling Project., must be bigger than or equal to 1.');
        }

        $this->container['average_rate'] = $average_rate;

        return $this;
    }

    /**
     * Gets total_rates
     *
     * @return int
     */
    public function getTotalRates()
    {
        return $this->container['total_rates'];
    }

    /**
     * Sets total_rates
     *
     * @param int $total_rates total_rates
     *
     * @return self
     */
    public function setTotalRates($total_rates)
    {
        if (is_null($total_rates)) {
            throw new \InvalidArgumentException('non-nullable total_rates cannot be null');
        }

        if (($total_rates < 0)) {
            throw new \InvalidArgumentException('invalid value for $total_rates when calling Project., must be bigger than or equal to 0.');
        }

        $this->container['total_rates'] = $total_rates;

        return $this;
    }

    /**
     * Gets is_paid
     *
     * @return bool
     */
    public function getIsPaid()
    {
        return $this->container['is_paid'];
    }

    /**
     * Sets is_paid
     *
     * @param bool $is_paid is_paid
     *
     * @return self
     */
    public function setIsPaid($is_paid)
    {
        if (is_null($is_paid)) {
            throw new \InvalidArgumentException('non-nullable is_paid cannot be null');
        }
        $this->container['is_paid'] = $is_paid;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


